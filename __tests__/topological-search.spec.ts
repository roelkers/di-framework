import { ListNode, TopologicalSort } from "../topological-sort"

describe('Topological search', () => {
  it('works on a simple graph', () => {
    const t = new TopologicalSort<{ value: number }>()
    t.addNode("C", { value: 1})
    t.addNode("A", { value: 3})
    t.addNode("B", { value: 2})
    t.addEdge("A","B")
    t.addEdge("A","C")
    t.sort()
    const res = t.getSortedList().map((n: ListNode<{value: number }>) => n.id)
    expect(res).toEqual(["C","B","A"])
  })

  it('works on a more complex graph', () => {
    const t = new TopologicalSort<{ value: number }>()
    t.addNode("0", { value: 1})
    t.addNode("1", { value: 2})
    t.addNode("2", { value: 4})
    t.addNode("3", { value: 2})
    t.addNode("4", { value: 0})
    t.addNode("5", { value: 5})
    t.addEdge("5","2")
    t.addEdge("5","0")
    t.addEdge("4","0")
    t.addEdge("2","3")
    t.addEdge("3","1")
    t.addEdge("4","1")
    t.sort()
    const res = t.getSortedList().map((n: ListNode<{value: number }>) => n.id)
    expect(res).toEqual(["0","1","3","2","4","5"])
  })

  it('works on a more complex graph', () => {
    const t = new TopologicalSort<{ value: number }>()
    t.addNode("5", { value: 5})
    t.addNode("3", { value: 2})
    t.addNode("1", { value: 2})
    t.addNode("2", { value: 4})
    t.addNode("0", { value: 1})
    t.addNode("4", { value: 0})
    t.addEdge("5","2")
    t.addEdge("5","0")
    t.addEdge("4","0")
    t.addEdge("2","3")
    t.addEdge("3","1")
    t.addEdge("4","1")
    t.sort()
    const res = t.getSortedList().map((n: ListNode<{value: number }>) => n.id)
    expect(res).toEqual(["1","3","2","0","5","4"])
  })

  it('works on app example', () => {
    const t = new TopologicalSort<{ value: number }>()
    t.addNode("0", { value: 1})
    t.addNode("4", { value: 4})
    t.addNode("3", { value: 2})
    t.addNode("2", { value: 0})
    t.addNode("1", { value: 2})
    t.addEdge("0","2")
    t.addEdge("2","3")
    t.addEdge("1","3")
    t.addEdge("2","4")
    t.addEdge("3","4")
    t.sort()
    const res = t.getSortedList().map((n: ListNode<{value: number }>) => n.id)
    expect(res).toEqual(["4","3","2","0","1"])
  })
})
